<?php

/**
 * @file
 * Functions for the migrate_default_content module.
 */

use Symfony\Component\Yaml\Parser;

/**
 * Implements hook_migration_plugins_alter().
 *
 * Create migrations based on the csv files.
 */
function migrate_default_content_migration_plugins_alter(&$definitions) {
  $source_dir = DRUPAL_ROOT . '/' . \Drupal::config('migrate_default_content.settings')->get('source_dir');

  // First we create a structure with all the migrations because we want to know
  // which ones are available and set dependencies.
  $migrations = [];
  if ($handle = opendir($source_dir)) {
    while (($file = readdir($handle)) !== FALSE) {
      $fileparts = explode('.', $file);
      if ($file != "." && $file != "..") {
        $language = '';
        $entity_type = $fileparts[0];
        $bundle = $fileparts[1];
        // If the file is a translation save the language that is informed in
        // the filename before the file extension.
        if (isset($fileparts[3])) {
          $language = $fileparts[2];
          $type = $fileparts[3];
        }
        else {
          $type = $fileparts[2];
        }
        $line = NULL;

        switch ($type) {
          case 'csv':
            // Read first line of the file to get the fields to be migrated.
            $csv = fopen($source_dir . '/' . $file, 'r');
            $line = explode(',', fgets($csv));
            fclose($csv);
            break;

          case 'yml':
            $parser = isset($parser) ? $parser : new Parser();
            $data = $parser->parse(file_get_contents($source_dir . '/' . $file));
            $line = array_keys($data[0]);
            break;

        }

        // Add the language to the migration name in the case it is a
        // translation migration.
        $id = empty($language) ? 'migrate_default_content_' . $entity_type . '_' . $bundle : 'migrate_default_content_' . $entity_type . '_' . $bundle . '_' . $language;

        if ($line) {
          $migrations[$id] = [
            'first_line' => $line,
            'entity_type' => $entity_type,
            'bundle' => $bundle,
            'type' => $type,
            'filename' => $file,
            'language' => $language,
            'is_revision' => FALSE,
          ];

          if (\Drupal::entityTypeManager()->getDefinition($entity_type)->isRevisionable()) {
            $id_revision = empty($language) ? 'migrate_default_content_' . $entity_type . '_revision_' . $bundle : 'migrate_default_content_' . $entity_type . '_revision_' . $bundle . '_' . $language;
            $migrations[$id_revision] = $migrations[$id];
            $migrations[$id_revision]['is_revision'] = TRUE;
          }

        }
      }
    }
    closedir($handle);
  }
  // Add files migration.
  if (file_exists($source_dir . '/files') && $handle = opendir($source_dir . '/files')) {
    $data_rows = [];
    while (($file = readdir($handle)) !== FALSE) {
      if ($file != "." && $file != "..") {
        $data_rows[] = ['filename' => $file];
      }
    }
    $migrations['migrate_default_content_file'] = [
      'data_rows' => $data_rows,
    ];
    closedir($handle);
  }

  foreach ($migrations as $id => $migration) {
    if ($id === 'migrate_default_content_file') {
      continue;
    }
    $headers = $migration['first_line'];
    // Assume the key is the first field of the csv.
    $key = trim(reset($headers));

    $destination = $migration['is_revision'] ? 'entity_revision' : 'entity';
    $migration_plugin = [
      'id' => $id,
      'migration_group' => 'migrate_default_content',
      'label' => $id,
      'class' => '\Drupal\migrate\Plugin\Migration',
      'status' => 1,
      'destination' => [
        'plugin' => $destination . ':' . $migration['entity_type'],
        'translations' => FALSE,
      ],
    ];

    if ('csv' === $migration['type']) {
      $migration_plugin['source'] = [
        'plugin' => $migration['type'],
        'path' => $source_dir . '/' . $migration['filename'],
        'header_row_count' => 1,
        'keys' => [
          0 => $key,
        ],
        'constants' => [
          'langcode' => $migration['language'],
        ],
      ];
    }
    if ('yml' === $migration['type']) {
      $migration_plugin['source'] = [
        'plugin' => 'yaml',
        'file' => $source_dir . '/' . $migration['filename'],
        'ids' => [
          $key => [
            'type' => 'string',
          ],
        ],
        'fields' => array_combine($headers, $headers),
        'constants' => [
          'langcode' => $migration['language'],
        ],
      ];
    }

    // Get bundle info.
    $bundle_key = \Drupal::service('entity_type.manager')->getDefinition($migration['entity_type'])->getKey('bundle');

    if ($bundle_key) {
      $migration_plugin['process'][$bundle_key] = [
        'plugin' => 'default_value',
        'default_value' => $migration['bundle'],
      ];
    }
    foreach ($headers as $field) {
      // Headers can have spaces or line endings as is the case for the last
      // field.
      $field = trim($field);
      if ($field == 'translation_origin') {
        // This is the field that references the origin node of a translation,
        // it is used to detect that the migration is a translation.

        // Define the id type of the origin migration.
        $id_type = \Drupal::service('entity_type.manager')->getDefinition($migration['entity_type'])->getKey('id');
        // Define the origin migration.
        $migration_plugin['process'][$id_type] = [
          [
            'plugin' => 'migration',
            'source' => $field,
            'migration' => 'migrate_default_content_' . $migration['entity_type'] . '_' . $migration['bundle'],
          ],

        ];

        // Define the langcode of the translation.
        $migration_plugin['process']['langcode'] = 'constants/langcode';
        // Define the content as translatable.
        $migration_plugin['destination']['translations'] = TRUE;
        // Define the dependency to the origin migration.
        $migration_plugin['migration_dependencies']['required'][] = 'migrate_default_content_' . $migration['entity_type'] . '_' . $migration['bundle'];


      }
      else {
        // Extra config can be specified like field_name:bundle.
        $extra = explode(':', $field);
        // Handle CSV header fieldSubfield e.g. "bodyFormat".
        $components = preg_split('/([A-Z])/', array_shift($extra), -1, PREG_SPLIT_DELIM_CAPTURE);
        $field = array_shift($components);
        $subfield = strtolower(implode($components));

        $dest_field = empty($subfield) ? $field : $field . '/' . $subfield;

        $source = $field . ucfirst($subfield) . (empty($extra) ? '' : ':' . implode(':', $extra));
        if (!isset($migration_plugin['process'][$dest_field])) {
          // It needs to be a normalized process.
          // See: https://api.drupal.org/api/drupal/core!modules!migrate!src!Plugin!Migration.php/function/Migration%3A%3AgetProcessNormalized/
          $migration_plugin['process'][$dest_field] = [
            [
              'plugin' => 'get',
              'source' => [$source],
            ],
            [
              'plugin' => 'extract',
              'index' => [0],
            ],
          ];
        }
        // Do not merge the source for the ID field of revision migrations.
        elseif ($migration_plugin['process'][$dest_field][0]['plugin'] === 'get') {
          $migration_plugin['process'][$dest_field][0]['source'][] = $source;
        }

        if ($migration['is_revision']) {
          $id_key = \Drupal::service('entity_type.manager')->getDefinition($migration['entity_type'])->getKey('id');
          $id_no_revision = empty($migration['language']) ? 'migrate_default_content_' . $migration['entity_type'] . '_' . $migration['bundle'] : 'migrate_default_content_' . $migration['entity_type'] . '_' . $migration['bundle'] . '_' . $migration['language'];
          $migration_plugin['process'][$id_key] = [
            [
              'plugin' => 'migration',
              'migration' => $id_no_revision,
              'source' => $key,
            ],

          ];

          $migration_plugin['migration_dependencies']['required'][] = $id_no_revision;
        }

        // If this an entity_reference field and a migrate_default_content
        // migration exists add it automatically.
        /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
        $field_definition = \Drupal::service('entity_field.manager')->getFieldDefinitions($migration['entity_type'], $migration['bundle'])[$field];
        // Handle special field types.
        if ($field_definition) {
          $multiple = $field_definition->getFieldStorageDefinition()->getCardinality() !== 1;
          $settings = $field_definition->getItemDefinition()->getSettings();
          $properties = [];
          switch ($field_definition->getType()) {
            case 'entity_reference_revisions':
              $properties['target_revision_id'] = 'migrate_default_content_' . $settings['target_type'] . '_revision';
              // Intentional fall-through.

            case 'entity_reference':
              $properties['target_id'] = 'migrate_default_content_' . $settings['target_type'];

              // In the case of an entity reference the extra configuration is
              // the bundles it should reference.
              if (isset($settings['handler_settings']['target_bundles'])) {
                $extra = array_merge($extra, $settings['handler_settings']['target_bundles']);
              }
              if (!empty($extra)) {
                // Add all posible referenceable bundles.
                foreach ($extra as $target_bundle) {
                  $migration_plugin = migrate_default_content_add_target_migration($migrations, $migration_plugin, $dest_field, $properties, '_' . $target_bundle, $multiple);
                }
              }
              // Assume is a entity with only one bundle. e.g. user.
              else {
                $migration_plugin = migrate_default_content_add_target_migration($migrations, $migration_plugin, $dest_field, $properties, '_' . $settings['target_type'], $multiple);
              }

              break;

            case 'file':
            case 'image':
              $properties['target_id'] = 'migrate_default_content_file';
              $migration_plugin = migrate_default_content_add_target_migration($migrations, $migration_plugin, $dest_field, $properties, '', $multiple);

              break;

            default:
              break;
          }
        }
      }
    }

    // Look up for an override yml file.
    $override_file_path = $source_dir . '/overrides/' . $migration['entity_type'] . '.' . $migration['bundle'] . '.yml';
    if (file_exists($override_file_path)) {
      $yaml = new Parser();
      $override = $yaml->parse(file_get_contents($override_file_path));
      $migration_plugin = array_merge_recursive($migration_plugin, $override);
    }
    $definitions[$id] = $migration_plugin;
  }
  if (isset($migrations['migrate_default_content_file'])) {
    $definitions['migrate_default_content_file'] = [
      'id' => 'migrate_default_content_file',
      'migration_group' => 'migrate_default_content',
      'label' => 'migrate_default_content_file',
      'class' => '\Drupal\migrate\Plugin\Migration',
      'status' => 1,
      'source' => [
        'plugin' => 'embedded_data',
        'ids' => ['filename' => ['type' => 'string']],
        'data_rows' => $migrations['migrate_default_content_file']['data_rows'],
        'constants' => [
          'source_base_path' => $source_dir . '/files/',
          'destination_base_uri' => 'public://migrate_default_content_files/',
        ],
      ],
      'process' => [
        'filename' => [
          'plugin' => 'get',
          'source' => 'filename',
        ],
        'destination_full_uri' => [
          'plugin' => 'concat',
          'source' => [
            'constants/destination_base_uri',
            'filename',
          ],
        ],
        'source_full_path' => [
          'plugin' => 'concat',
          'source' => [
            'constants/source_base_path',
            'filename',
          ],
        ],
        'uri' => [
          'plugin' => 'file_copy',
          'source' => [
            '@source_full_path',
            '@destination_full_uri',
          ],
        ],
      ],
      'destination' => [
        'plugin' => 'entity:file',
      ],
    ];
  }
}

/**
 * Add a migration to the process pipeline with its dependency.
 */
function migrate_default_content_add_target_migration($migrations, $migration_plugin, $dest_field, $properties, $suffix, $multiple) {
  if ($multiple) {
    if (isset($migration_plugin['process'][$dest_field][3]) && ($migration_plugin['process'][$dest_field][3]['plugin'] === 'iterator')) {
      $process = $migration_plugin['process'][$dest_field][3];
    }
    else {

      $process = [
        'plugin' => 'iterator',
        'process' => [],
      ];
    }
    foreach ($properties as $property_name => $target_id) {
      if (isset($migrations[$target_id . $suffix])) {
        $target_headers = $migrations[$target_id . $suffix]['first_line'];
        // Assume the key is the first field of the csv.
        $target_key = trim(reset($target_headers));

        if (!isset($process['process'][$property_name])) {
          $process['process'][$property_name] = [
            'plugin' => 'migration',
            'migration' => [$target_id . $suffix],
            'source' => $target_key,
            'no_stub' => TRUE,
          ];
        }
        elseif ($process['process'][$property_name]['plugin'] === 'migration') {
          $process['process'][$property_name]['migration'][] = $target_id . $suffix;
        }
        // Avoid dependencies on itself.
        if ($target_id != $migration_plugin['id']) {
          $migration_plugin['migration_dependencies']['required'][] = $target_id . $suffix;
        }
      }
    }
    $migration_plugin['process'][$dest_field][1] = [
      'plugin' => 'callback',
      'callable' => 'array_filter',
    ];
    $migration_plugin['process'][$dest_field][2] = [
      'plugin' => 'callback',
      'callable' => 'migrate_process_array_merge',
    ];
    $migration_plugin['process'][$dest_field][3] = $process;
  }
  else {
    foreach ($properties as $property_name => $target_id) {
      if (isset($migrations[$target_id . $suffix])) {
        $dest_subfield = explode('/', $dest_field);
        if (isset($dest_subfield[1]) && ($dest_subfield[1] != $property_name)) {
          return $migration_plugin;
        }
        // We don't need a source because only the first process plugin in
        // the pipeline should have it and we already have the explode plugin.
        $migration_plugin['process'][$dest_field][] = [
          'plugin' => 'migration',
          'migration' => $target_id . $suffix,
          'no_stub' => TRUE,
        ];
        // Avoid dependencies on itself.
        if ($target_id != $migration_plugin['id']) {
          $migration_plugin['migration_dependencies']['required'][] = $target_id . $suffix;
        }
      }
    }
  }
  return $migration_plugin;
}

function migrate_process_array_merge($value) {
  $new_value = [];
  if (!is_null($value)) {
    foreach ($value as $array) {
      $new_value = array_merge($new_value, $array);
    }
  }
  return $new_value;
}
